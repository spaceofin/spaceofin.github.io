3:I[9275,[],""]
5:I[1343,[],""]
6:I[5767,["231","static/chunks/231-6a7b6dfd7bcbf59a.js","185","static/chunks/app/layout-c9173ec0898b2734.js"],"PostProvider",1]
7:I[231,["231","static/chunks/231-6a7b6dfd7bcbf59a.js","185","static/chunks/app/layout-c9173ec0898b2734.js"],""]
4:["slug","250417_commit","d"]
0:["RXy6EsBE1La1Foi2c_t5-",[[["",{"children":["commit-logs",{"children":[["slug","250417_commit","d"],{"children":["__PAGE__?{\"slug\":\"250417_commit\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["commit-logs",{"children":[["slug","250417_commit","d"],{"children":["__PAGE__",{},[["$L1","$L2",null],null],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","commit-logs","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","commit-logs","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec8169d84bc91095.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","$L6",null,{"children":["$","body",null,{"children":[["$","nav",null,{"className":"font-mono mx-16","children":["$","ul",null,{"className":"relative min-h-32 mt-14 mb-10 mx-2 sm:mx-12 lg:mx-14 flex flex-col md:flex-row md:space-x-12 lg:space-x-16 space-y-1 md:space-y-0 justify-center md:justify-start items-start sm:items-center md:items-center text-2xl md:text-3xl z-0 tracking-tight text-zinc-900 pl-4 sm:pl-0","children":[["$","li",null,{"children":["$","$L7",null,{"href":"/","children":"Home"}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/learning-logs","children":"Learning Logs"}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/commit-logs","children":"Commit Logs"}]}]]}]}],["$","div",null,{"className":"flex justify-center py-10","children":["$","div",null,{"className":"page-background","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}]}]}]]}]}]}]],null],null],[null,"$L8"]]]]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Spaceofin Logs"}],["$","meta","3",{"name":"description","content":"A blog for study logs"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"256x256"}]]
1:null
9:T4c4,// src/pages/posts-ssg/[id].tsx
import { GetStaticProps, GetStaticPaths, InferGetStaticPropsType } from "next";
import { Post } from "../types/posts";

export const getStaticPaths = (async () => {
  const response = await fetch("https://jsonplaceholder.typicode.com/posts");
  const posts: Post[] = await response.json();

  const paths = posts.map((post) => ({
    params: { id: post.id.toString() },
  }));

  return { paths, fallback: "blocking" };
}) satisfies GetStaticPaths;

export const getStaticProps = (async (context) => {
  const { id } = context.params as { id: string };

  try {
    const response = await fetch(
      `https://jsonplaceholder.typicode.com/posts/${id}`
    );
    const post = await response.json();

    if (!post) {
      return {
        notFound: true,
      };
    }

    return {
      props: { post },
    };
  } catch (error) {
    return {
      props: {
        post: null,
      },
    };
  }
}) satisfies GetStaticProps<{ post: Post }>;

export default function PostDetail({
  post,
}: InferGetStaticPropsType<typeof getStaticProps>) {
  if (!post) return <div>Post not found</div>;

  return (
    <div>
      <h1>{post.title}</h1>
      <p>{post.body}</p>
    </div>
  );
}
a:T5b8,<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="next-head-count" content="2" />
    <title>Page Router Practice</title>
    <link ... />
    ...
    <script ... ></script>
    ...
  </head>
  <body>
    <div id="__next">
      <div>
        <h1>
          sunt aut facere repellat provident occaecati excepturi optio
          reprehenderit
        </h1>
        <p>
          quia et suscipit suscipit recusandae consequuntur expedita et cum
          reprehenderit molestiae ut ut quas totam nostrum rerum est autem sunt
          rem eveniet architecto
        </p>
      </div>
    </div>
    <script id="__NEXT_DATA__" type="application/json" crossorigin="">
      {
        "props": {
          "pageProps": {
            "post": {
              "userId": 1,
              "id": 1,
              "title": "sunt aut facere repellat provident occaecati excepturi optio reprehenderit",
              "body": "quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto"
            }
          },
          "__N_SSG": true
        },
        "page": "/posts-ssg/[id]",
        "query": { "id": "1" },
        "buildId": "7GLf-bloOy3f3Es1FFa0B",
        "isFallback": false,
        "gsp": true,
        "scriptLoader": []
      }
    </script>
  </body>
</html>
b:T5c9,<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="next-head-count" content="2" />
    <title>Page Router Practice</title>
    <link ... />
    ...
    <script ...></script>
  </head>
  <body>
    <div id="__next">
      <div>
        <h1>
          sunt aut facere repellat provident occaecati excepturi optio
          reprehenderit
        </h1>
        <p>
          quia et suscipit suscipit recusandae consequuntur expedita et cum
          reprehenderit molestiae ut ut quas totam nostrum rerum est autem sunt
          rem eveniet architecto
        </p>
      </div>
    </div>
    <script id="__NEXT_DATA__" type="application/json">
      {
        "props": {
          "pageProps": {
            "post": {
              "userId": 1,
              "id": 1,
              "title": "sunt aut facere repellat provident occaecati excepturi optio reprehenderit",
              "body": "quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto"
            }
          },
          "__N_SSP": true
        },
        "page": "/posts-ssr/[id]",
        "query": { "id": "1" },
        "buildId": "GJy1_82tSFjQEfDSmWtbL",
        "isFallback": false,
        "isExperimentalCompile": false,
        "gssp": true,
        "scriptLoader": []
      }
    </script>
  </body>
</html>
2:["$","div",null,{"className":"flex flex-col prose dark:prose-invert w-full h-full max-h-none overflow-visible px-4","children":[["$","h1",null,{"className":"my-20 text-4xl","children":"Page Router에서의 데이터 페칭 함수들 실습해보기(in Next.js)"}],"\n",["$","p",null,{"children":"Page Router 방식에서 사용하는 다음의 데이터 페칭 함수들에 대한 실습을 진행합니다."}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["$","code",null,{"children":"getServerSideProps"}]}],"\n",["$","li",null,{"children":["$","code",null,{"children":"getStaticProps"}]}],"\n",["$","li",null,{"children":["$","code",null,{"children":"getStaticPaths"}]}],"\n"]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"getServerSideProps"}],"는 ",["$","code",null,{"children":"SSR"}],"에, ",["$","code",null,{"children":"getStaticProps"}],"와 ",["$","code",null,{"children":"getStaticPaths"}],"는 ",["$","code",null,{"children":"SSG"}],"에 사용됩니다.",["$","br",null,{}],"\n",["$","code",null,{"children":"SSR"}],"과의 비교를 위해 ",["$","code",null,{"children":"CSR"}],"의 경우도 함께 실습합니다."]}],"\n",["$","h2",null,{"className":"mt-20 text-3xl text-blue-900","children":"Client Side Rendering(with dynamic routes)"}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"page router"}]," 방식에서 일반적인 ",["$","code",null,{"children":"Dynamic Routes"}]," 구현에 ",["$","code",null,{"children":"useRouter"}],"를 사용합니다.",["$","br",null,{}],"\n","아래는 클라이언트 사이드에서의 데이터 페칭을 위해 useEffect 내부에서 fetch 함수를 사용하고 가져온 데이터를 post 상태 변수에 할당하는 코드입니다."]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"// src/pages/posts-csr/[id].tsx\nimport { useRouter } from \"next/router\";\nimport { useEffect, useState } from \"react\";\nimport { Post } from \"../types/posts\";\n\nexport default function PostDetail() {\n  const router = useRouter();\n  const { id } = router.query;\n\n  const [post, setPost] = useState<Post | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (id) {\n      setLoading(true);\n      fetch(`https://jsonplaceholder.typicode.com/posts/${id}`)\n        .then((response) => response.json())\n        .then((data) => {\n          setPost(data);\n          setLoading(false);\n        })\n        .catch(() => {\n          setLoading(false);\n        });\n    }\n  }, [id]);\n\n  if (loading) return <div>Loading...</div>;\n  if (!post) return <div>Post not found</div>;\n\n  return (\n    <div>\n      <h1>{post.title}</h1>\n      <p>{post.body}</p>\n    </div>\n  );\n}\n\n"}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"/posts-csr/1"}]," 페이지에 접속 시 클라이언트 측에서 서버로부터 전송 받는 html 파일은 아래와 같습니다.",["$","br",null,{}],"\n",["$","code",null,{"children":"<div>Loading...</div>"}],"만 담겨져 있고 실질적인 데이터는 아직 담겨 있지 않습니다."]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <meta name=\"next-head-count\" content=\"2\" />\n    <title>Page Router Practice</title>\n    <link ... />\n    ...\n    <script ... ></script>\n    ...\n  </head>\n  <body>\n\t  <div id=\"__next\"><div>Loading...</div></div>\n    <script id=\"__NEXT_DATA__\" type=\"application/json\" crossorigin=\"\">\n      {\n        \"props\": { \"pageProps\": {} },\n        \"page\": \"/posts-csr/[id]\",\n        \"query\": {},\n        \"buildId\": \"7GLf-bloOy3f3Es1FFa0B\",\n        \"nextExport\": true,\n        \"autoExport\": true,\n        \"isFallback\": false,\n        \"scriptLoader\": []\n      }\n    </script>\n  </body>\n</html>\n"}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"posts-csr/1"}]," 페이지 로드 후 클라이언트 사이드 렌더링이 일어나며 API 로부터 fetch 해온 json 데이터가 화면에 렌더링되었습니다."]}],"\n",["$","p",null,{"children":["$","img",null,{"className":"mt-1 mb-8","src":"https://mizcysqzabsegohkcjcx.supabase.co/storage/v1/object/public/posts/commit-logs/images/Pasted%20image%2020250416215753.png","alt":""}]}],"\n",["$","p",null,{"children":["$","img",null,{"className":"mt-1 mb-8","src":"https://mizcysqzabsegohkcjcx.supabase.co/storage/v1/object/public/posts/commit-logs/images/Pasted%20image%2020250416220122.png","alt":""}]}],"\n",["$","h2",null,{"className":"mt-20 text-3xl text-blue-900","children":"Static Site Generation(with dynamic routes)"}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"SSG"}]," 방식의 Dynamic Routes 구현을 위해서는 ",["$","code",null,{"children":"getStaticProps"}],"와 ",["$","code",null,{"children":"getStaticPaths"}],"를 함께 사용합니다."]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"$9"}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"/posts-ssg/1"}]," 페이지에 접속 시 클라이언트 측에서 서버로부터 전송 받는 html 파일은 아래와 같습니다.",["$","br",null,{}],"\n","실질적인 데이터가 이미 html 파일에 담겨 있습니다. ",["$","code",null,{"children":"build time"}],"에 미리 정적으로 생성된 페이지입니다."]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"$a"}]}],"\n",["$","p",null,{"children":["$","img",null,{"className":"mt-1 mb-8","src":"https://mizcysqzabsegohkcjcx.supabase.co/storage/v1/object/public/posts/commit-logs/images/Pasted%20image%2020250416230227.png","alt":""}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"\"__N_SSG\": true"}]," 부분과 ",["$","code",null,{"children":"\"gsp\": true,"}],"부분에서 SSG이며 ",["$","code",null,{"children":"getStaticProps"}],"를 사용했음을 알 수 있습니다."]}],"\n",["$","h2",null,{"className":"mt-20 text-3xl text-blue-900","children":"Server Side Rendering(with dynamic routes)"}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"SSG"}]," 방식의 Dynamic Routes 구현을 위해서는 ",["$","code",null,{"children":"getServerSideProps"}],"를 사용합니다."]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"import { GetServerSideProps, InferGetServerSidePropsType } from \"next\";\nimport { Post } from \"../types/posts\";\n\nexport const getServerSideProps = (async (context) => {\n  const { id } = context.params as { id: string };\n\n  try {\n    const response = await fetch(\n      `https://jsonplaceholder.typicode.com/posts/${id}`\n    );\n    const post = await response.json();\n\n    if (!post) {\n      return {\n        notFound: true,\n      };\n    }\n\n    return {\n      props: { post },\n    };\n  } catch (error) {\n    return {\n      props: {\n        post: null,\n      },\n    };\n  }\n}) satisfies GetServerSideProps<{ post: Post }>;\n\nexport default function PostDetail({\n  post,\n}: InferGetServerSidePropsType<typeof getServerSideProps>) {\n  if (!post) return <div>Post not found</div>;\n\n  return (\n    <div>\n      <h1>{post.title}</h1>\n      <p>{post.body}</p>\n    </div>\n  );\n}\n\n"}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"/posts-ssr/1"}]," 페이지에 접속 시 클라이언트 측에서 서버로부터 전송 받는 html 파일은 아래와 같습니다.",["$","br",null,{}],"\n","SSG 케이스와 마찬가지로 실질적인 데이터가 이미 html 파일에 담겨 있습니다. 하지만 이는 build time에 정적으로 생성된 페이지가 아닙니다. ",["$","code",null,{"children":"request time"}],"에 생성되어 서버로부터 전송받은 페이지입니다."]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"$b"}]}],"\n",["$","p",null,{"children":["$","img",null,{"className":"mt-1 mb-8","src":"https://mizcysqzabsegohkcjcx.supabase.co/storage/v1/object/public/posts/commit-logs/images/Pasted%20image%2020250416234237.png","alt":""}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"\"__N_SSP\": true"}]," 부분과 ",["$","code",null,{"children":"\"gssp\": true,"}],"부분에서 SSR이며 ",["$","code",null,{"children":"getServerSideProps"}],"를 사용했음을 알 수 있습니다."]}],"\n",["$","h2",null,{"className":"mt-20 text-3xl text-blue-900","children":"Build Result"}],"\n",["$","p",null,{"children":"빌드 결과입니다."}],"\n",["$","p",null,{"children":["$","img",null,{"className":"mt-1 mb-8","src":"https://mizcysqzabsegohkcjcx.supabase.co/storage/v1/object/public/posts/commit-logs/images/Pasted%20image%2020250417134430.png","alt":""}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"/posts-ssg/[id]"}]," 페이지는 ",["$","code",null,{"children":"(SSG)"}],"로, ",["$","code",null,{"children":"/posts-csr/[id]"}]," 페이지는 ",["$","code",null,{"children":"(Static)"}],"으로, ",["$","code",null,{"children":"/posts-ssr/[id]"}]," 페이지는 ",["$","code",null,{"children":"(Server)"}]," 로 생성되었습니다."]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"/posts-csr/[id]"}],"의 초기 페이지는 build time에 서버에서 사전 렌더링 되어 static html로 클라이언트 측에 전송되며 이후로는 클라이언트 사이드 렌더링이 진행됩니다. ",["$","code",null,{"children":"/posts-ssr/[id]"}]," 페이지는 runtime 중 request time에 ",["$","code",null,{"children":"SSR"}]," 됩니다."]}],"\n",["$","h2",null,{"className":"mt-20 text-3xl text-blue-900","children":"references"}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"https://nextjs.org/docs/13/pages/building-your-application/data-fetching\nhttps://nextjs.org/docs/13/pages/api-reference/functions\nhttps://nextjs.org/docs/13/pages/building-your-application/routing/dynamic-routes\n"}]}]]}]
