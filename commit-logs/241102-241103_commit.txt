3:I[9275,[],""]
5:I[1343,[],""]
6:I[5767,["231","static/chunks/231-6a7b6dfd7bcbf59a.js","185","static/chunks/app/layout-c9173ec0898b2734.js"],"PostProvider",1]
7:I[231,["231","static/chunks/231-6a7b6dfd7bcbf59a.js","185","static/chunks/app/layout-c9173ec0898b2734.js"],""]
4:["slug","241102-241103_commit","d"]
0:["A_hyAvGl7MjvCzIoIniqY",[[["",{"children":["commit-logs",{"children":[["slug","241102-241103_commit","d"],{"children":["__PAGE__?{\"slug\":\"241102-241103_commit\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["commit-logs",{"children":[["slug","241102-241103_commit","d"],{"children":["__PAGE__",{},[["$L1","$L2",null],null],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","commit-logs","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","commit-logs","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/9fec157a107b46e0.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","$L6",null,{"children":["$","body",null,{"children":[["$","nav",null,{"className":"font-mono mx-16","children":["$","ul",null,{"className":"relative min-h-32 m-14 mb-10 flex flex-col md:flex-row md:space-x-12 space-y-1 justify-center md:justify-start items-center text-2xl md:text-3xl z-0 tracking-tight text-zinc-900","children":[["$","li",null,{"children":["$","$L7",null,{"href":"/","children":"Home"}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/learning-logs","children":"Learning Logs"}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/commit-logs","children":"Commit Logs"}]}]]}]}],["$","div",null,{"className":"flex justify-center py-10","children":["$","div",null,{"className":"page-background","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}]}]}]]}]}]}]],null],null],[null,"$L8"]]]]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Spaceofin Logs"}],["$","meta","3",{"name":"description","content":"A blog for study logs"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"256x256"}]]
1:null
2:["$","div",null,{"className":"flex flex-col prose dark:prose-invert w-full h-full max-h-none overflow-visible px-4","children":[["$","h1",null,{"className":"my-20 text-4xl","children":"Form update 하기(with RHF)"}],"\n",["$","h2",null,{"className":"mt-20 text-3xl text-blue-900","children":"Q. Form을 수정하려면 어떻게 해야 할까요?"}],"\n",["$","h3",null,{"className":"text-2xl dark:text-2xl text-sky-700 dark:text-sky-300","children":"저장된 값 띄우기"}],"\n",["$","p",null,{"children":["todo card의 ",["$","code",null,{"children":"edit"}]," 버튼을 클릭하면 저장된 값들이 form에 떠야합니다."]}],"\n",["$","h4",null,{"className":"text-xl font-bold dark:text-xl mt-4 text-slate-800 dark:text-sky-500","children":"시도 1. setValue 이용하기"}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"getTodoById"}]," 함수를 이용하여 DB로부터 해당 todo 에 대한 정보를 가져오고 ",["$","code",null,{"children":"setValue"}],"를 이용하여 값을 하나하나 입력해주는 방식입니다."]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"  useEffect(() => {\n    const fetchTodoById = async () => {\n      if (todoIdToUpdate) {\n        todoToUpdate = await getTodoById(todoIdToUpdate);\n        const {\n          task,\n          category,\n          priority,\n          startTimeStamp,\n          endTimeStamp,\n          memo,\n          status,\n        } = todoToUpdate;\n        const [startDate, startTime] = startTimeStamp.slice(0, -4).split(\"T\");\n        const [endDate, endTime] = endTimeStamp.slice(0, -4).split(\"T\");\n\n        const dateOnly =\n          startTime === \"00:00\" && endTime === \"00:00\" ? true : false;\n\n        setValue(\"task\", task);\n        setValue(\"category\", category);\n        setValue(\"priority\", priority);\n        setValue(\"dates.startDate\", startDate);\n        setValue(\"dates.startTime\", startTime);\n        setValue(\"dates.endDate\", endDate);\n        setValue(\"dates.endTime\", endTime);\n        setValue(\"memo\", memo);\n        setValue(\"dates.dateOnly\", dateOnly);\n      }\n    };\n    fetchTodoById();\n  }, []);\n\n"}]}],"\n",["$","h4",null,{"className":"text-xl font-bold dark:text-xl mt-4 text-slate-800 dark:text-sky-500","children":"시도 2. reset 이용하기"}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"RHF"}],"의 ",["$","code",null,{"children":"reset"}],"을 이용하여 한꺼번에 값을 주는 방법입니다."]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"  useEffect(() => {\n    const fetchTodoById = async () => {\n      if (todoIdToUpdate) {\n        todoToUpdate = await getTodoById(todoIdToUpdate);\n        const { startTimeStamp, endTimeStamp } = todoToUpdate;\n        const [startDate, startTime] = startTimeStamp.slice(0, -4).split(\"T\");\n        const [endDate, endTime] = endTimeStamp.slice(0, -4).split(\"T\");\n        const dateOnly =\n          startTime === \"00:00\" && endTime === \"00:00\" ? true : false;\n\n        reset({\n          ...todoToUpdate,\n          dates: {\n            startDate: startDate,\n            startTime: startTime,\n            endDate: endDate,\n            endTime: endTime,\n            dateOnly: dateOnly,\n          },\n        });\n      }\n    };\n    fetchTodoById();\n  }, []);\n"}]}],"\n",["$","h3",null,{"className":"text-2xl dark:text-2xl text-sky-700 dark:text-sky-300","children":"updateTodo 함수 만들기"}],"\n",["$","p",null,{"children":["수정한 값들을 db에 업데이트할 때 사용할 ",["$","code",null,{"children":"updateTodo"}]," 함수를 만들었습니다."]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"export const updateTodo = async (id: string, updatedFields: Partial<Todo>) => {\n  const response = await fetch(`http://localhost:3001/todos/${id}`, {\n    method: \"PATCH\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(updatedFields),\n  });\n\n  if (!response.ok) {\n    throw new Error(\"Failed to update todo\");\n  }\n\n  const result = await response.json();\n  return result;\n};\n"}]}],"\n",["$","p",null,{"children":["전체 항목 업데이트가 아닌 바뀐 값 만을 업데이트하기 위해 ",["$","code",null,{"children":"PATCH"}]," 메소드를 사용하였고 ",["$","code",null,{"children":"Partial<Todo>"}]," 자료형을 갖는 updatedFields 변수를 사용하였습니다."]}],"\n",["$","h4",null,{"className":"text-xl font-bold dark:text-xl mt-4 text-slate-800 dark:text-sky-500","children":["$","code",null,{"children":"Partial<Type>"}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"Partial<Type>"}],"은 Type의 모든 속성이 option으로 설정된 타입입니다. 이 유틸리티 타입은 주어진 Type의 모든 부분 집합을 나타내는 타입을 반환합니다."]}],"\n",["$","h3",null,{"className":"text-2xl dark:text-2xl text-sky-700 dark:text-sky-300","children":"watch를 이용한 저장된 값과 수정된 값의 비교"}],"\n",["$","h4",null,{"className":"text-xl font-bold dark:text-xl mt-4 text-slate-800 dark:text-sky-500","children":"저장된 값과 수정된 값 각각 변수에 할당하기"}],"\n",["$","p",null,{"children":["updateTodo 함수에 수정된 fields만을 전달하기 위해 수정된 값을 먼저 추출합니다.\n값 변화 비교를 위해 ",["$","code",null,{"children":"useForm"}],"의 ",["$","code",null,{"children":"watch"}]," 메서드를 사용합니다."]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"export default function AddInputTodo({\n  todoIdToUpdate,\n}: {\n  todoIdToUpdate?: string;\n}) {\n\t...\n\tconst savedValuesRef = useRef<InputTodo | null>(null);\n\tuseEffect(() => {\n\t  const fetchTodoById = async () => {\n\t    if (todoIdToUpdate) {\n\t      ...\n\t      savedValuesRef.current = watch();\n\t    }\n\t  };\n\t  fetchTodoById();\n\t}, []);\n\n    const onSubmit: SubmitHandler<InputTodo> = async (todo: InputTodo) => {\n      try {\n        if (todoIdToUpdate) {\n          const currentValues = watch();\n          const savedValues = savedValuesRef.current;\n\n\t\t  ...(currentValues와 savedValues를 비교하는 로직)...\n\t\t} \n\t  }\n\t}\n\treturn ( ... );\n}\n"}]}],"\n",["$","p",null,{"children":["렌더링과 훅 실행 순서에 관계 없이 같은 값을 사용하기 위해 ",["$","code",null,{"children":"useRef"}],"를 사용하여 savedValuesRef를 정의합니다."]}],"\n",["$","h5",null,{"className":"text-lg font-bold dark:text-xl mt-4 text-slate-600 dark:text-sky-500","children":"+) 잘못된 코드: useEffect 훅은 컴포넌트 렌더링 이후에 실행됩니다."}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"// error code\nexport default function AddInputTodo({\n  todoIdToUpdate,\n}: {\n  todoIdToUpdate?: string;\n}) {\n\t...\n\tlet savedValues;\n\tuseEffect(() => {\n\t  const fetchTodoById = async () => {\n\t    if (todoIdToUpdate) {\n\t      ...\n\t      savedValues = watch();\n\t    }\n\t  };\n\t  fetchTodoById();\n\t}, []);\n\n    const onSubmit: SubmitHandler<InputTodo> = async (todo: InputTodo) => {\n      try {\n        if (todoIdToUpdate) {\n          const currentValues = watch();\n\t\t  ...(currentValues와 savedValues를 비교하는 로직)...\n\t\t} \n\t  }\n\t}\n\treturn ( ... );\n}\n"}]}],"\n",["$","p",null,{"children":["savedValues를 useEffect와 onSubmit의 외부 스코프에 선언하여 하나의 변수로 이용하려 했지만 위와 같은 코드를 작성했더니 useEffect 훅의 실행 순서 문제로 onSubmit에 전달된 savedValues는 ",["$","code",null,{"children":"undefined"}]," 값이 되었으며 watch()로 할당한 savedValues의 값은 useEffect 내부에서만 유효했습니다."]}],"\n",["$","h4",null,{"className":"text-xl font-bold dark:text-xl mt-4 text-slate-800 dark:text-sky-500","children":"저장된 값과 수정된 값의 비교"}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"// useEffect 내부의 watch 메서드 할당 부분 코드 수정\n// 수정 전: savedValuesRef.current = watch();\n\nsavedValuesRef.current = JSON.parse(JSON.stringify(watch()));\n"}]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"// savedValues와 currentValues를 비교하여 값이 변한 부분만 updatedFields에 저장합니다.\nconst currentValues = watch();\nconst savedValues = savedValuesRef.current;\nconst updatedFields: { [key: string]: any } = {};\n\nfor (const key in savedValues) {\n  const k = key as keyof InputTodo;\n  if (k === \"dates\") {\n\tconst savedDates = savedValues.dates;\n\tconst currentDates = currentValues.dates;\n\tconsole.log(\"savedDates:\", savedDates);\n\tconsole.log(\"currentDates:\", currentDates);\n\tfor (const dateKey in savedDates) {\n\t  const dk = dateKey as keyof typeof savedDates;\n\t  if (savedDates[dk] !== currentDates[dk]) {\n\t\tif (!updatedFields.dates) {\n\t\t  updatedFields.dates = {};\n\t\t}\n\t\tupdatedFields.dates[dk] = currentDates[dk];\n\t  }\n\t}\n  } else if (savedValues[k] !== currentValues[k]) {\n\tupdatedFields[k] = currentValues[k];\n  }\n}\n"}]}],"\n",["$","p",null,{"children":["$","img",null,{"className":"mt-1 mb-8","src":"https://mizcysqzabsegohkcjcx.supabase.co/storage/v1/object/public/posts/commit-logs/images/Pasted%20image%2020241104185955.png","alt":""}]}],"\n",["$","h5",null,{"className":"text-lg font-bold dark:text-xl mt-4 text-slate-600 dark:text-sky-500","children":"+) 잘못된 코드: useForm의 watch 메서드는 얕은 복사를 수행합니다."}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"//useEffect 내부의 watch 메서드를 수정하지 않았을 때\nsavedValuesRef.current = watch();\n"}]}],"\n",["$","p",null,{"children":"코드를 실행하고 startTime 항목을 09:00 에서 09:10 값으로 수정하고 submit 버튼을 클릭하면 아래와 같은 콘솔 로그가 찍힙니다."}],"\n",["$","p",null,{"children":["$","img",null,{"className":"mt-1 mb-8","src":"https://mizcysqzabsegohkcjcx.supabase.co/storage/v1/object/public/posts/commit-logs/images/Pasted%20image%2020241104185106.png","alt":""}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"Form"}]," 창에서 Dates와 관련된 값 변경 시 currentDates 뿐 아니라 savedDates 객체의 값도 같은 값으로 동기화가 되어 버리는 문제입니다. 이 문제는 watch 메서드가 ",["$","code",null,{"children":"얕은 복사(swallow copy)"}],"를 수행하기 때문에 일어나는 결과로, savedDates와 currentDates는 같은 참조를 공유합니다. 그래서 두 객체의 값 변화가 없기 때문에 updateFields는 항상 빈 object가 되어 todo card의 업데이트가 일어나지 않게 됩니다."]}],"\n",["$","h3",null,{"className":"text-2xl dark:text-2xl text-sky-700 dark:text-sky-300","children":"+) 추가(241108) - defaultValues를 사용한 기본값 사용으로 저장된 값 띄우기"}],"\n",["$","p",null,{"children":["기존 ",["$","code",null,{"children":"AddInputTodo"}]," 컴포넌트 내에서 ",["$","code",null,{"children":"todoIdToUpdate"}]," 파라미터의 전달 유무에 따라 new todo/update todo 판단을 하던 로직을 해당 판단을 상위 컴포넌트에서 하고 조건에 따라 다른 컴포넌트를 렌더링 하도록 코드를 수정하였습니다."]}],"\n",["$","p",null,{"children":["new todo인 경우 파라미터 없이 ",["$","code",null,{"children":"AddInputTodo"}]," 컴포넌트를, update todo인 경우 매개변수를 전달하며  ",["$","code",null,{"children":"EditInputTodo"}]," 컴포넌트를 렌더링합니다.\n",["$","code",null,{"children":"EditInputTodo"}]," 컴포넌트에서는 ",["$","code",null,{"children":"getTodoById"}]," 함수로 id에 따른 todo data를 fetch 하고 해당 data를 파라미터로 전달하며 ",["$","code",null,{"children":"AddInputTodo"}]," 컴포넌트를 렌더링합니다."]}],"\n",["$","p",null,{"children":["todo에 저장된 data를 전달 받아 컴포넌트를 렌더링 하므로 ",["$","code",null,{"children":"setValue"}],"나 ",["$","code",null,{"children":"reset"}],"을 사용하지 않고 ",["$","code",null,{"children":"userForm"}],"의 ",["$","code",null,{"children":"defaultValues"}]," 옵션에 data를 바로 할당할 수 있습니다."]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"// 수정 전 코드\nexport default function AddInputTodo({\n  todoIdToUpdate,\n}: {\n  todoIdToUpdate?: string;\n}) {\n\t...\n\tconst {\n\t    register,\n\t    handleSubmit,\n\t    watch,\n\t    reset,\n\t    formState: { errors },\n    } = useForm<InputTodo>({ resolver: zodResolver(inputTodoSchema) });\n\t...\n}\n"}]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"// 수정 후 코드\nexport default function AddInputTodo({\n  todoToUpdate,\n}: {\n  todoToUpdate?: InputTodo;\n}) {\n\t...\n\tconst {\n\t\tregister,\n\t\thandleSubmit,\n\t\twatch,\n\t\tformState: { errors },\n\t} = useForm<InputTodo>({\n\t\tresolver: zodResolver(inputTodoSchema),\n\t\tdefaultValues: todoToUpdate\n\t})\n\t...\n}\n"}]}],"\n",["$","h2",null,{"className":"mt-20 text-3xl text-blue-900","children":"reference"}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype\n"}]}]]}]
