3:I[9275,[],""]
5:I[1343,[],""]
6:I[5767,["231","static/chunks/231-6a7b6dfd7bcbf59a.js","185","static/chunks/app/layout-446e62b86e627af0.js"],"PostProvider",1]
7:I[231,["231","static/chunks/231-6a7b6dfd7bcbf59a.js","185","static/chunks/app/layout-446e62b86e627af0.js"],""]
4:["slug","241105_commit","d"]
0:["jR7RHHw2IFzIPTIU3yLv5",[[["",{"children":["commit-logs",{"children":[["slug","241105_commit","d"],{"children":["__PAGE__?{\"slug\":\"241105_commit\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["commit-logs",{"children":[["slug","241105_commit","d"],{"children":["__PAGE__",{},[["$L1","$L2",null],null],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","commit-logs","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","commit-logs","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/66d3904b5e4c08cc.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","$L6",null,{"children":["$","body",null,{"className":"__variable_1e4310 __variable_c3aa02 antialiased","children":[["$","nav",null,{"className":"font-mono mx-16","children":["$","ul",null,{"className":"relative min-h-32 m-14 mb-10 flex flex-col md:flex-row md:space-x-12 space-y-1 justify-center md:justify-start items-center text-2xl md:text-3xl z-0 tracking-tight text-zinc-900","children":[["$","li",null,{"children":["$","$L7",null,{"href":"/","children":"Home"}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/learning-logs","children":"Learning Logs"}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/commit-logs","children":"Commit logs"}]}]]}]}],["$","div",null,{"className":"flex justify-center py-10","children":["$","div",null,{"className":"page-background","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}]}]}]]}]}]}]],null],null],[null,"$L8"]]]]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Create Next App"}],["$","meta","3",{"name":"description","content":"Generated by create next app"}]]
1:null
2:["$","div",null,{"className":"flex flex-col prose dark:prose-invert w-full h-full max-h-none overflow-visible px-4","children":[["$","h1",null,{"className":"my-20 text-4xl","children":"tailwindcss 동적 클래스 이름(dynamic class name) 사용하기"}],"\n",["$","h2",null,{"className":"mt-20 text-3xl text-blue-900","children":"Trouble: tailwindcss에서 템플릿 리터럴(template literal) 사용이 안 돼요"}],"\n",["$","p",null,{"children":"tailwindcss에서 당연히 가능할 것 같았던 문법이 제대로 동작하지 않습니다. 아래와 같은 템플릿 리터럴 부분입니다."}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"const bgColor = `bg-${color}-300`;\n"}]}],"\n",["$","p",null,{"children":"문제가 되는 부분의 코드는 아래와 같습니다."}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"{dayTodos.map((todo, index) => {\n\t...\n\tconst topClass = `top-${4 + todo.index * 4}`;\n\tconst bgColor = `bg-${todo.color}-300`;\n\treturn (\n\t\t<div\n\t\t  key={index}\n\t\t  className={`absolute ${topClass} left-0 w-full h-4 z-0 ${bgColor}`}></div>\n\t);\n\t})}\n"}]}],"\n",["$","p",null,{"children":["공식 문서를 찾아보면 ",["$","code",null,{"children":"Don’t use props to build class names dynamically"}],"라고 안내하고 있습니다."]}],"\n",["$","p",null,{"children":"class names을 동적으로 사용하면 안되며 항상 완전한 class names를 사용하라고 합니다."}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"// error code\n<div class=\"text-{{ error ? 'red' : 'green' }}-600\"></div>\n"}]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"// error code\nfunction Button({ color, children }) {\n  return (\n    <button className={`bg-${color}-600 hover:bg-${color}-500 ...`}>\n      {children}\n    </button>\n  )\n}\n"}]}],"\n",["$","p",null,{"children":"위와 같은 코드는 tailwindcss에서 작동하지 않습니다."}],"\n",["$","h3",null,{"className":"text-2xl dark:text-2xl text-sky-700 dark:text-sky-300","children":"tailwindcss의 dynamic class name에서 허용된 것"}],"\n",["$","h4",null,{"className":"text-xl font-bold dark:text-xl my-2 text-slate-800 dark:text-sky-500","children":"1. 완전한 클래스 이름(complete class names) 사용"}],"\n",["$","p",null,{"children":"전체 class names을 조건에 따라 사용하는 것이 가능합니다."}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"<div class=\"{{ error ? 'text-red-600' : 'text-green-600' }}\"></div>\n"}]}],"\n",["$","h4",null,{"className":"text-xl font-bold dark:text-xl my-2 text-slate-800 dark:text-sky-500","children":"2. 정적 클래스 이름(static class names) 를 맵핑(mapping)하여 사용"}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"function Button({ color, children }) {\n  const colorVariants = {\n    blue: 'bg-blue-600 hover:bg-blue-500',\n    red: 'bg-red-600 hover:bg-red-500',\n  }\n\n  return (\n    <button className={`${colorVariants[color]} ...`}>\n      {children}\n    </button>\n  )\n}\n"}]}],"\n",["$","h4",null,{"className":"text-xl font-bold dark:text-xl my-2 text-slate-800 dark:text-sky-500","children":"3. safelist 사용하기"}],"\n",["$","p",null,{"children":["만일 ",["$","code",null,{"children":"bg-${color}-300"}],"와 같은 동적 클래스를 사용하고 싶다면 ",["$","code",null,{"children":"tailwind.config.js"}]," 파일에서 ",["$","code",null,{"children":"safelist"}]," 옵션을 추가하는 방법이 있습니다."]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './pages/**/*.{html,js}',\n    './components/**/*.{html,js}',\n  ],\n  safelist: [\n    'text-2xl',\n    'text-3xl',\n    {\n      pattern: /bg-(red|green|blue)-(100|200|300)/,\n    },\n  ],\n  // ...\n}\n"}]}],"\n",["$","p",null,{"children":"하지만 안전 목록(safelisting)은 마지막 수단으로 사용해야 하며, 특정 콘텐츠에서 클래스 이름을 스캔할 수 없는 상황에서만 사용해야 합니다. 이러한 상황은 드물며, 이 기능이 필요할 일은 거의 없다고 공식 홈페이지에서는 안내하고 있습니다."}],"\n",["$","h2",null,{"className":"mt-20 text-3xl text-blue-900","children":"Trouble 해결하기"}],"\n",["$","p",null,{"children":"문제가 되는 코드 부분을 수정합니다."}],"\n",["$","h3",null,{"className":"text-2xl dark:text-2xl text-sky-700 dark:text-sky-300","children":"방법1. static class names mapping"}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"const todoColors: Record<string, string> = {\n  gray: \"bg-gray-300\",\n  purple: \"bg-purple-300\",\n  yellow: \"bg-yellow-300\",\n  pink: \"bg-pink-300\",\n  orange: \"bg-orange-300\",\n  blue: \"bg-blue-300\",\n  red: \"bg-red-300\",\n  green: \"bg-green-300\",\n};\n\nconst topClasses = [\"top-4\", \"top-8\", \"top-12\", \"top-16\", \"top-20\"];\n"}]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"{dayTodos.map((todo, index) => {\n\t...\n\treturn (\n\t\t<div\n\t\t  key={index}\n\t\t  className={`absolute ${\n\t\t\ttopClasses[todo.index]\n\t\t  } left-0 w-full h-4 z-0 ${todoColors[todo.color]}`}></div>\n\t);\n})}\n"}]}],"\n",["$","p",null,{"children":"동적으로 사용되던 class names를 static class names로 바꾸어 사용하도록 하였습니다.\n정상적으로 작동합니다."}],"\n",["$","h3",null,{"className":"text-2xl dark:text-2xl text-sky-700 dark:text-sky-300","children":"방법2. safelist 사용"}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"//tailwind.config.ts\nimport type { Config } from \"tailwindcss\";\n\nconst config: Config = {\n  ...\n  safelist: [\n    {\n      pattern:\n        /bg-(gray|blue|orange|green|red|yellow|pink|purple|sky)-(200|300|400)/,\n    },\n    {\n      pattern: /top-\\d+/,\n    },\n  ],\n  ...\n};\nexport default config;\n"}]}],"\n",["$","p",null,{"children":"사용할 색들을 미리 지정해서 safelist의 패턴으로 추가하고 top-숫자 형태 역시 패턴으로 추가하였습니다."}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"{dayTodos.map((todo, index) => {\n\tconst topClass = `top-${4 + todo.index * 4}`;\n\tconst bgColor = `bg-${todo.color}-300`;\n\treturn (\n\t  <div\n\t    key={index}\n\t    className={`absolute ${topClass} left-0 w-full h-4 z-0 ${bgColor}`}\n\t  ></div>\n\t);\n})}\n"}]}],"\n",["$","p",null,{"children":"미리 패턴 지정을 해두었기 때문에 위와 같은 코드가 정상적으로 작동하였습니다."}],"\n",["$","h2",null,{"className":"mt-20 text-3xl text-blue-900","children":"references"}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"https://tailwindcss.com/docs/content-configuration#dynamic-class-names\n"}]}]]}]
